@using System;
@using Sandbox.UI;

@namespace Facepunch.UI
@inherits Panel

@attribute [StyleSheet]

<root class="hidden flex absolute inset-0 align-center justify-center">
    <table class="with-background with-padding-lg">
        <div class="title">
            <label class="important">@(Name) - @(Status)</label>
            <label class="important">@(Time?.ToString(@"m\:ss"))</label>
        </div>

        @for ( int i = 0; i < GroupedPlayers.Count(); i++ )
        {
            @{
                var group = GroupedPlayers[i];
            }

            @if ( group.Key == Team.Unassigned )
            {
                <div class="flex gap-sm align-center">
                    <Icon file="/ui/teams/spectator.png" size="16" />
                    <label class="small grey">@(string.Join(", ", group.Select(x => x.DisplayName))</label>
                </div>
            }
            else
            {
                <span class="flex align-center space-between gap-sm" style="color: @group.Key.GetColor().Hex">
                    <span class="flex align-center gap-sm">
                        <Icon file="@group.Key.GetIconPath()" size="24" />
                        <label class="emphasis with-py">@group.Key.GetName()</label>
                    </span>

                    <separator style="background-color: @group.Key.GetColor().Hex" />

                    @if ( GameMode.Instance.Get<TeamScoring>() is { } scoring )
                    {
                        <label class="emphasis">@scoring.GetFormattedScore(group.Key)</label>
		            }
                </span>

                <div class="row header with-px-lg with-py-sm">
                    <label class="col stat-small small"></label>
                    <label class="col stat-small small"></label>
                    <label class="col playername small"></label>
                    @if ( !GameMode.Instance.UnlimitedMoney )
                    {
                        <label class="col stat-large small">Balance</label>
                    }
                    else
                    {
                        <label class="col stat-large small"></label>
                    }
                    <label class="col stat small">Score</label>
                    <label class="col stat small">Kills</label>
                    <label class="col stat small">Deaths</label>
                    <label class="col stat small">Ratio</label>
                </div>

                @foreach ( var player in group )
                {
                    <ScoreboardRow PlayerState="@player" />
                }

                @if ( i == 0 )
                {
                    <GameOverview />
                }
            }
        }
    </table>
</root>

@code
{
    public string Status => GameMode.Instance?.DisplayedStatus;
    public string Name => GameMode.Instance?.Title;
    public TimeSpan? Time => GameMode.Instance?.DisplayedTime;

    public IEnumerable<PlayerState> PlayerStates => GameUtils.AllPlayerStates;

    private List<IGrouping<Team, PlayerState>> GroupedPlayers
    {
        get
        {
            var sortedPlayers = PlayerStates.OrderByDescending(x => x.Components.Get<PlayerScore>().Score);
            var groupedPlayers = sortedPlayers.GroupBy(x => x.Team);
            return groupedPlayers.ToList();
        }
    }

    public bool IsActive { get; set; }

    protected override int BuildHash()
    {
        if ( !IsActive ) return 0;
        return HashCode.Combine( IsActive, GroupedPlayers, Status, Time, GameUtils.AllPlayers );
    }

    public override void Tick()
    {
        if ( Input.Pressed( "Score" ) )
        {
            IsActive = Input.Pressed( "Score" );
            SetClass( "visible", true );
        }

        if ( Input.Released( "Score" ) )
        {
            SetClass( "visible", false );
            IsActive = false;
        }
    }
}
