@namespace Facepunch.UI
@using Sandbox.Events
@inherits PanelComponent
@implements IGameEventHandler<OnScoreAddedEvent>

@if (!IsHudEnabled)
    return;

@{
    var isValidPlayer = PlayerState.Viewer.IsValid() && PlayerState.Viewer.Pawn.IsValid();
}

<root>
    @if ( isValidPlayer )
    {
        <ScreenProtectionOverlay />
        <DamageOverlay />
    }

    <canvas>
        @if ( isValidPlayer )
        {
            @* <Crosshair /> *@

            <div class="hud with-deadzone top-left flex column">
                    <Minimap />
                    <Balance />
            </div>
        }

        <Toast />

        @if ( isValidPlayer )
        {
            <EquipmentOverlay />
            <PlayerInfo />
            <Spectating />
            <Deathcam />
            <DefuseKitDisplay />
            <DamageIndicator />
            <RoundStateDisplay />
            <KillFeed @ref="KillFeed" />
        }


        <div class="right">
            <div class="flex-grow" />
            <Voices />

            @if ( isValidPlayer )
            {
                <WeaponInfoComponent />
            }
        </div>

        @if ( isValidPlayer )
        {
            <Radio />
            <ScoringSystem @ref="ScoringSystem" />
        }

        @if ( !isValidPlayer )
        {
            <RespawnScreen />
        }
    </canvas>
    
    @if ( isValidPlayer )
    {
        <!-- Full-screen overlays -->
        <BuyMenu />
        <MarkerSystem />

        <PlayAreaOverlay />
        <DeployedPawnOverlay />
    }

    <Scoreboard />
</root>

@code 
{
    [ConVar( "cl_drawhud" )]
    public static bool IsHudEnabled { get; set; } = true;

    [DeveloperCommand( "Toggle HUD", "Visuals" )]
    private static void Command_ToggleHUD()
    {
        IsHudEnabled = !IsHudEnabled;
    }

    public ScoringSystem ScoringSystem { get; set; }

    public KillFeed KillFeed { get; set; }

    void IGameEventHandler<OnScoreAddedEvent>.OnGameEvent( OnScoreAddedEvent eventArgs )
    {
        if ( !ScoringSystem.IsValid() )
        {
            return;
        }

        ScoringSystem.OnScore( eventArgs.Score, eventArgs.Reason );
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(IsHudEnabled, PlayerState.Viewer.IsValid(), PlayerState.Viewer.IsValid() && PlayerState.Viewer.Pawn.IsValid() );
    }
}