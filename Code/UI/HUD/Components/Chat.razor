@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Events;
@using Facepunch.UI;
@using Facepunch;

@inherits PanelComponent
@implements Component.INetworkListener
@implements IGameEventHandler<TeamAssignedEvent>

@attribute [StyleSheet]

@if (!MainHUD.IsHudEnabled)
    return;

<root class="absolute inset-0">
    <canvas>
        <div class="chat-container hud flex column-reverse with-deadzone bottom-left with-px">
            <div class="layout gap">
                <div class="when-open flex align-center gap-sm shrink-0">
                    <InputHint Action="Score" class="small" Size="@InputGlyphSize.Small" />
                    <label>
                        @ChatMode
                    </label>
                </div>

                <div class="when-not-open flex align-center gap-sm shrink-0">
                    <InputHint Action="Chat" class="small" Size="@InputGlyphSize.Small" />
                    <label>
                        Chat
                    </label>
                </div>

                <div class="when-not-open flex align-center gap-sm shrink-0">
                    <InputHint Action="Radio" class="small" Size="@InputGlyphSize.Small" />
                    <label>
                        Radio
                    </label>
                </div>

                <ChatBox class="input" @ref="InputBox" OnTabPressed="@ChangeChatMode" onsubmit="@ChatFinished"></ChatBox>
            </div>

            <div class="hud flex column justify-start">
                @foreach (var entry in Entries)
                {
                    <div class="hud with-padding flex row gap-sm align-center">
                        @if (entry.steamid > 0)
                        {
                            <div class="square rounded shrink-0" style="background-image: url( avatar:@entry.steamid )"></div>
                        }

                        @if (entry.type == MessageType.Chat)
                        {
                            <span class="flex row w-full align-center shrink-0 gap-sm">
                                <span class="flex row gap-sm align-center shrink-0">

                                    @if ( entry.chatMode != ChatModes.All )
                                    {
                                        <label class="small no-shadow green">TEAM</label>
                                    }

                                    <label class="playername bold no-shadow" style="color: @entry.color.Hex">@entry.author</label>

                                    @if (entry.chatMode != ChatModes.All)
                                    {
                                        @if ( entry.location is { } zoneName )
                                        {
                                            <label class="small no-shadow grey">(@zoneName)</label>
                                        }
                                    }

                                    @if ( entry.tags?.Contains( "radio" ) ?? false )
                                    {
                                        <Icon class="square rounded shrink-0" File="/ui/chat/radio.png" size="24" />
                                    }

                                </span>

                                <label class="message no-shadow">@entry.message</label>
                            </span>
                        }
                        else
                        {
                            <span class="flex row gap-sm w-full align-center">
                                <label class="message no-shadow">@entry.message</label>
                            </span>
                        }
                    </div>
                }
            </div>
        </div>
    </canvas>
</root>

@code
{
    public enum MessageType
    {
        Chat,
        System,
    }

    public enum ChatModes
    {
        Team,
        All,
    }

    private ChatModes ChatMode = ChatModes.Team;
    private TextEntry InputBox { get; set; }

    public record Entry(ulong steamid, string author, string message, RealTimeSince timeSinceAdded, ChatModes chatMode, MessageType type, Color color, string tags = null, string location = null);
    private List<Entry> Entries = new();

    private bool Open => InputBox?.HasFocus ?? false;

    public static Chat Instance { get; set; }

    public Chat()
    {
        Instance = this;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( ChatMode, Open, MainHUD.IsHudEnabled );
    }

    protected override void OnUpdate()
    {
        if ( InputBox is null )
            return;

        Panel.AcceptsFocus = false;

        if ( Input.Pressed( "chat" ) )
        {
            InputBox.Focus();
        }

        if ( Entries.RemoveAll( x => x.timeSinceAdded > 20.0f ) > 0 )
        {
            StateHasChanged();
        }

        // Limit to 5 messages
        Entries = Entries.TakeLast(5).ToList();

        SetClass("open", InputBox.HasFocus);
    }

    void ChangeChatMode()
    {
        ChatMode = ChatMode == ChatModes.All ? ChatModes.Team : ChatModes.All;
        Log.Info( $"Chat mode changed to {ChatMode}" );
    }

    void ChatFinished()
    {
        var text = InputBox.Text;
        InputBox.Text = "";

        if ( string.IsNullOrWhiteSpace( text ) )
            return;

        if ( ChatMode == ChatModes.Team )
        {
            var players = GameUtils.AllPlayers;
            var friendlyGameObjects = players.Where((PlayerState x) => !x.IsBot && PlayerState.Local.IsFriendly(x));
            var friendlyConnections = friendlyGameObjects.Select( x => x.Connection );

            using ( Rpc.FilterInclude( friendlyConnections ) )
            {
                AddText( text, ChatMode );
            }
        }
        else
        {
            AddText( text, ChatMode );
        }
    }

    [Broadcast]
    public void AddText( string message, ChatModes chatMode, string tags = null )
    {
        message = message.Truncate( 300 );

        if ( string.IsNullOrWhiteSpace( message ) )
            return;

        var author = Rpc.Caller.DisplayName;
        var steamid = Rpc.Caller.SteamId;

        var playerState = GameUtils.AllPlayers.FirstOrDefault(x => x.Connection == Rpc.Caller);

        if ( !playerState.IsValid() )
            return;

        var color = playerState.Team.GetColor();

        var playerPawn = playerState.PlayerPawn;
        string location = null;
        if ( playerPawn.IsValid() )
        {
            var mapLocation = playerPawn.GetZone<MapLocation>();
            if ( mapLocation.IsValid() && mapLocation.Zone.IsValid() )
            {
                location = mapLocation.Zone.DisplayName;
            }
        }

        Entries.Add( new( steamid, author, message, 0.0f, chatMode, MessageType.Chat, color, tags, location ) );

        StateHasChanged();
    }

    [Broadcast( NetPermission.HostOnly )]
    public void AddSystemText( string message )
    {
        message = message.Truncate( 300 );

        if ( string.IsNullOrWhiteSpace( message ) )
            return;

        Entries.Add( new( 0, "", message, 0.0f, ChatModes.All, MessageType.System, Color.White ) );
        StateHasChanged();
    }

    void IGameEventHandler<TeamAssignedEvent>.OnGameEvent( TeamAssignedEvent eventArgs )
    {
        if ( IsProxy ) return;

        if ( eventArgs.Team == Team.Unassigned )
            AddSystemText( $"{eventArgs.Player.DisplayName} is spectating" );
        else
            AddSystemText( $"{eventArgs.Player.DisplayName} is joining the {eventArgs.Team.GetName()}" );
    }

    void Component.INetworkListener.OnDisconnected( Connection channel )
    {
        if ( IsProxy ) return;

        // TODO: why would these events get fired with an empty guid in the first place?
        if ( channel.Id == Guid.Empty )
            return;

        AddSystemText( $"{channel.DisplayName} has left the game" );
    }
}
