@using System;
@using Sandbox.UI;

@namespace Facepunch.UI
@inherits Panel

<root class="row @(IsLocal ? "local" : "") @(IsDead ? "dead" : "") with-px-lg with-py">
    <span class="col stat-small">
        @if ( Player.IsValid() && GameUtils.LocalPlayer.IsValid() ) 
        {
            @if (Player.Inventory.HasBomb && IsFriendly && Team == Team.Terrorist)
            {
                <Icon File="/ui/bomb.png" size="24"></Icon>
            }
            else if (Player.Inventory.HasDefuseKit && IsFriendly && Team == Team.CounterTerrorist)
            {
                <Icon File="/ui/defusekit.png" size="24"></Icon>
            }
        }
    </span>

    <span class="col stat-small">
        <label class="small">@(Connection.Ping.CeilToInt())</label>
    </span>

    <span class="col playername gap-sm">
        
        <PlayerAvatar ShowHealth=@false ShowBomb=@false class="avatar" Player=@Player />
        <label>
            @Player.DisplayName
        </label>

        @if ( IsPartyMember )
        {
            <Icon File="/ui/party-member.png" size="24"></Icon>
        }
    </span>

    @if ( !GameMode.Instance.UnlimitedMoney && Player.IsValid() && GameUtils.LocalPlayer.IsValid() && Player.IsFriendly( GameUtils.LocalPlayer ) )
    {
        <label class="col stat-large">$@(Player.PlayerState.Balance.ToString("N0")</label>
    }
    else
    {
        <label class="col stat-large"></label>
    }

    <label class="col stat">@(Score.Score)</label>
    <label class="col stat">@(Score.Kills)</label>
    <label class="col stat">@(Score.Deaths)</label>

    <label class="col stat">@(KillDeathRatio.ToString("0.00"))</label>
</root>

@code {
    public PlayerPawn Player { get; set; }
    private Connection Connection => Player.Network.OwnerConnection;
    private PlayerScore Score => Player.Components.Get<PlayerScore>();

    private bool IsFriendly => (GameUtils.LocalPlayer is null || Player.IsFriendly(GameUtils.LocalPlayer));
    private bool IsLocal => Player.IsLocallyControlled;
    private bool IsDead => Player.HealthComponent.State != LifeState.Alive;
    private float KillDeathRatio => (float)Score.Kills / (float)Score.Deaths.Clamp(1, int.MaxValue);
    private Team Team => Player.Team;
    private bool IsPartyMember => PartyRoom.Current?.Members.Any( x => x.Id == Connection.SteamId ) ?? false;

    protected override int BuildHash()
    {
        var a = HashCode.Combine(KillDeathRatio, Score.Score, Score.Kills, Score.Deaths, Connection, IsLocal, IsDead, Connection?.Ping);
        var b = HashCode.Combine(Player.Inventory.HasDefuseKit, Player.Inventory.HasBomb, IsPartyMember, Player.PlayerColor);

        return HashCode.Combine(a, b);
    }
}