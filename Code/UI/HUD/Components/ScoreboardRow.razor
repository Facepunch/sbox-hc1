@using System;
@using Sandbox.UI;

@namespace Facepunch.UI
@inherits Panel

<root class="row @(IsLocal ? "local" : "") @(IsDead ? "dead" : "") with-px-lg with-py">
    <span class="col stat-small">
        @if ( Player.IsValid() ) 
        {
            @if (Player.Inventory.HasBomb && IsFriendly && Team == Team.Terrorist)
            {
                <Icon File="/ui/bomb.png" size="24"></Icon>
            }
            else if (Player.Inventory.HasDefuseKit && IsFriendly && Team == Team.CounterTerrorist)
            {
                <Icon File="/ui/defusekit.png" size="24"></Icon>
            }
        }
    </span>

    <span class="col stat-small">
        @if ( Connection is not null )
        {
            <label class="small">@(Connection?.Ping.CeilToInt())</label>
        }
        else
        {
            <Icon style="background-tint: red;" File="/ui/no-connection.png" size="24" />
        }
    </span>

    <span class="col playername gap-sm">
        
        <PlayerAvatar ShowHealth=@false ShowBomb=@false class="avatar" Player=@PlayerState />
        <label>
            @PlayerState.DisplayName
        </label>

        @if ( IsPartyMember )
        {
            <Icon File="/ui/party-member.png" size="24"></Icon>
        }
    </span>

    @if ( !GameMode.Instance.UnlimitedMoney && PlayerState.IsValid() && PlayerState.IsFriendly( PlayerState.Local ) )
    {
        <label class="col stat-large">$@(PlayerState.Balance.ToString("N0")</label>
    }
    else
    {
        <label class="col stat-large"></label>
    }

    <label class="col stat">@(Score.Score)</label>
    <label class="col stat">@(Score.Kills)</label>
    <label class="col stat">@(Score.Deaths)</label>

    <label class="col stat">@(KillDeathRatio.ToString("0.00"))</label>
</root>

@code {
    public PlayerState PlayerState { get; set; }
    public PlayerPawn Player => PlayerState.PlayerPawn;
    private Connection Connection => PlayerState.Network.OwnerConnection;
    private PlayerScore Score => PlayerState.Components.Get<PlayerScore>();

    private bool IsFriendly => PlayerState.IsFriendly( PlayerState.Local );
    private bool IsLocal => PlayerState.IsLocalPlayer;
    private bool IsDead => !Player.IsValid() || Player.HealthComponent.State != LifeState.Alive;
    private float KillDeathRatio => (float)Score.Kills / (float)Score.Deaths.Clamp(1, int.MaxValue);
    private Team Team => PlayerState.Team;
    private bool IsPartyMember => PartyRoom.Current?.Members.Any( x => x.Id == Connection.SteamId ) ?? false;

    public bool Disconnected => Connection is null;

    protected override int BuildHash()
    {
        var a = HashCode.Combine( KillDeathRatio, Score.Score, Score.Kills, Score.Deaths, Connection, IsLocal, IsDead, Connection?.Ping );
        var b = 0;
        if ( Player.IsValid() )
            b= HashCode.Combine( Player.Inventory.HasDefuseKit, Player.Inventory.HasBomb, IsPartyMember, Player.PlayerColor );

        return HashCode.Combine( a, b );
    }
}