@namespace Facepunch.UI
@inherits Panel
@attribute [StyleSheet]

@if ( !Player.IsValid() )
    return;

@if ( !Player.CurrentEquipment.IsValid() )
    return;

<root class="flex row gap align-center justify-end" style="width: 100px;">
    @if ( Shoot.IsValid() )
    {
        <div class="layout firemode gap">
            @if ( Shoot.SupportedFireModes.Count > 1 )
            {
             <InputHint Action="FireMode" />
            }
            <Icon File=@FireModeFile size="24" />
        </div>
    }

    <label class="vital">@(AmmoComponent?.Ammo.ToString() ?? "∞")</label>
    <separator />
    <label class="important">@(Inventory.GetAmmo( AmmoComponent.AmmoType ).ToString() ?? "∞")</label>
</root>

@code
{
    /// <summary>
    /// The player's inventory
    /// </summary>
    public PlayerInventory Inventory => Player.Inventory;

    /// The player
    public PlayerPawn Player => PlayerState.Viewer.PlayerPawn;

    private AmmoComponent AmmoComponent => Player?.CurrentEquipment?.Components?.Get<AmmoComponent>( FindMode.EverythingInSelfAndDescendants );

    public ShootWeaponComponent Shoot => Player.CurrentEquipment.IsValid() ? Player.CurrentEquipment.Components.Get<ShootWeaponComponent>( FindMode.EnabledInSelfAndDescendants ) : null;

    private string FireModeFile
    {
        get
        {
            if ( !Shoot.IsValid() ) return null;

            return $"ui/firemode/{Shoot.CurrentFireMode.ToString().ToLowerInvariant()}.png";
        }
    }

    protected override int BuildHash()
    {
        if ( !Player.IsValid() || !Player.CurrentEquipment.IsValid() )
            return 0;
        return HashCode.Combine( Player, AmmoComponent?.Ammo, Player?.CurrentEquipment, FireModeFile );
    }
}
