@namespace Facepunch.UI
@inherits Panel
@attribute [StyleSheet]

<root>
    @foreach ( var entry in Entries )
    {
        <div class="entry @(entry.IsLocal ? "local" : "")">
            @if ( entry.DamageInfo.Attacker.IsValid() )
            {
                <PlayerPanel PlayerState=@GameUtils.GetPlayerState( entry.DamageInfo.Attacker ) />
            }

            <div class="method">
                @if ( GameUtils.FindEquipment( entry.DamageInfo.Inflictor ) is { } weapon )
                {
                    <div class="icon" style="background-image: url( @weapon.Resource.Icon );" />

                    @if ( entry.DamageInfo.Hitbox.HasFlag( HitboxTags.Head ) )
                    {
                        <Icon class="headshot" File="/ui/headshot.png" size="32" />
                    }
                }
                else if ( entry.DamageInfo.Inflictor is TimedExplosive bomb )
                {
                    <Icon File="/ui/bomb.png" size="32"></Icon>
                }
                else
                {
                    <label>killed</label>
                }
            </div>

            <PlayerPanel PlayerState=@GameUtils.GetPlayerState( entry.DamageInfo.Victim ) />
        </div>
    }
</root>

@code
{
    public record Entry( DamageInfo DamageInfo, RealTimeSince TimeSinceAdded )
    {
        public bool IsLocal => 
            (GameUtils.GetPawn( DamageInfo.Attacker )?.IsLocallyControlled ?? false) ||
            (GameUtils.GetPawn( DamageInfo.Victim )?.IsLocallyControlled ?? false);
    }

    private List<Entry> Entries { get; set; } = new();

    private float Lifetime => 10f;

    public void OnPlayerKilled( DamageInfo damageInfo )
    {
        var entry = new Entry( damageInfo, 0 );
        Entries.Add( entry );
        StateHasChanged();
    }

    public override void Tick()
    {
        // Limit entries so we don't get too busy
        Entries = Entries.TakeLast( 5 ).ToList();

        // Did we remove something?
        if ( Entries.RemoveAll( x => x.TimeSinceAdded > Lifetime ) > 0 )
        {
            StateHasChanged();
        }
    }
}