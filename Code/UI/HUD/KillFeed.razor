@namespace Facepunch.UI
@inherits Panel
@attribute [StyleSheet]

<root>
    @foreach ( var entry in Entries )
    {
        <div class="entry">
            @if ( entry.Attacker is not null )
            {
                @if ( entry.Attacker.StartsWith( "icon:" ) )
                {
                    <Icon File="@entry.AttackerIcon" size="32" />
                }
                else
                {
                    <label style="color:@entry.AttackerColor.Hex">@entry.Attacker</label>
                }
            }

            <div class="method">
                @if ( entry.HitboxTags.HasFlag( HitboxTags.Head ) )
                {
                    <Icon class="headshot" File="/ui/headshot.png" size="32" />
                }

                @if ( entry.Inflictor is not null )
                {
                    @if ( entry.Inflictor.StartsWith( "icon:" ) )
                    {
                        <Icon class="icon" File="@entry.InflictorIcon" size="96" />
                    }
                    else
                    {
                        <label>@entry.Inflictor</label>
                    }
                }
                else
                {
                    <label>killed</label>
                }
            </div>

            @if ( entry.Victim is not null )
            {
                @if ( entry.Victim.StartsWith( "icon:" ) )
                {
                    <Icon File="@entry.VictimIcon" size="32" />
                }
                else
                {
                    <label style="color:@entry.VictimColor.Hex">@entry.Victim</label>
                }
            }
        </div>
    }
</root>

@code
{
    private static KillFeed Instance { get; set; } = null;

    public KillFeed()
    {
        Instance = this;
    }

    public record KillFeedEntry( string Attacker, Color AttackerColor, string Inflictor, string Victim, Color VictimColor, HitboxTags HitboxTags, DamageFlags DamageFlags,
        RealTimeSince TimeSinceAdded )
    {
        public string AttackerIcon => Attacker.Replace("icon:", "");
        public string InflictorIcon => Inflictor.Replace("icon:", "");
        public string VictimIcon => Victim.Replace( "icon:", "" );
    }

    private List<KillFeedEntry> Entries { get; set; } = new();

    private float Lifetime => 10f;

    [Broadcast] 
    public static void BroadcastKillFeedEvent( string attacker, Color attackerColor, string inflictor, string victim, Color victimColor, HitboxTags tags, DamageFlags flags )
    {
        Instance.Entries.Add( new KillFeedEntry( attacker, attackerColor, inflictor, victim, victimColor, tags, flags, 0 ) );
        Instance.StateHasChanged();
    }

    public static void RecordEvent( DamageInfo damageInfo )
    {
        var attackerDesc = GameUtils.GetDescription( damageInfo.Attacker );
        var inflictorDesc = GameUtils.GetDescription( damageInfo.Inflictor );
        var victimDesc = GameUtils.GetDescription( damageInfo.Victim );

        var attacker = attackerDesc?.DisplayName;
        if ( !string.IsNullOrEmpty( attackerDesc.Icon ) ) attacker = $"icon:{attackerDesc.Icon}";

        var inflictor = inflictorDesc?.DisplayName;
        if ( !string.IsNullOrEmpty( inflictorDesc.Icon ) ) inflictor = $"icon:{inflictorDesc.Icon}";

        var victim = victimDesc?.DisplayName;
        if ( !string.IsNullOrEmpty( victimDesc.Icon ) ) victim = $"icon:{victimDesc.Icon}";

        BroadcastKillFeedEvent(
            attacker, attackerDesc.Color,
            inflictor,
            victim, victimDesc.Color,
            //
            damageInfo.Hitbox,
            damageInfo.Flags
        );

    }

    public override void Tick()
    {
        // Limit entries so we don't get too busy
        Entries = Entries.TakeLast( 5 ).ToList();

        // Did we remove something?
        if ( Entries.RemoveAll( x => x.TimeSinceAdded > Lifetime ) > 0 )
        {
            StateHasChanged();
        }
    }
}