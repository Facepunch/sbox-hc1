@inherits BaseMarkerPanel
@namespace Facepunch.UI

@if ( !Player.IsValid() ) return;

<style>
    PlayerMarkerPanel
    {
        justify-content: flex-end;
        align-items: center;
        flex-direction: column-reverse;
        text-shadow: 1px 1px 1px rgba( black, 1 );
        transform: translateY(-100%);
       
        .dot
        {
            width: 6px;
            height: 6px;
            border-radius: 100px;
            background-color: @Player.PlayerColor.Hex;
            box-shadow: 2px 2px 2px rgba( black, 0.5 );
        }

        .name
        {
            text-shadow: 1px 1px 1px rgba( black, 1 );
            font-weight: 900;
            color: @Player.Team.GetColor().Hex;
        }

        .hp
        {
            text-shadow: 1px 1px 1px rgba( black, 1 );
            color: @Player.Team.GetColor().Hex;
        }

        .weapons
        {
            label
            {
                text-shadow: 1px 1px 1px rgba( black, 1 );
            }
            gap: -8px;

            height: 48px;

            .icon {
                width: 64px;
                height: 64px;
            }
        }

        Icon {
            background-image-tint: @Player.Team.GetColor().Hex;
        }
    }
</style>

<root>
    @if ( !Marker.IsValid() )
        return;

    @if ( Player.IsPossessed )
        return;

    @if ( Marker.IsBehind ) 
        return;

    @if ( Player?.HealthComponent?.State != LifeState.Alive )
        return;

    @* TODO: make the player markers show up for enemies under certain circumstances
    when aiming at a player that's kinda close to you? *@
    @if ( Viewer.IsValid() && !Viewer.IsFriendly(Player) )
        return;

    @if ( Marker.IsOffScreen )
    {
        //
    }
    else
    {
        <div class="dot" />
        <label class="name">@(Player.HealthComponent.Health.ToString( "0" ))%</label>
        <label class="name">@Player.DisplayName</label>
        <div class="weapons row">
            @foreach (var wpn in Player.Inventory.Equipment.Where( CanShowWeapon ).OrderBy( x => x.Resource.Slot ) )
            {
                <img class="icon" src="@wpn.Resource.Icon"/>
            }
        </div>

        @if (Player.Inventory.HasBomb && (!Viewer.IsValid() || Player.IsFriendly(Viewer)) )
        {
            <Icon File="/ui/bomb.png" size="24"></Icon>
        }
    }
</root>

@code
{
    public PlayerPawn Player => Object?.GameObject?.Components?.Get<PlayerPawn>();
    private PlayerPawn Viewer => PlayerState.Viewer.PlayerPawn;

    private bool CanShowWeapon( Equipment equipment )
    {
        if ( equipment.Resource.Slot == EquipmentSlot.Melee ) return false;
        if ( equipment.Resource.Slot == EquipmentSlot.Special ) return false;
        return true;
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        if ( firstTime ) 
        {
            Log.Info( $"MarkerPanelTypeOverride: Created PlayerMarkerPanel for \"{Player.DisplayName}\"" );
        }
    }

    protected override int BuildHash()
    {
        return System.HashCode.Combine( Time.Now );
    }
}
